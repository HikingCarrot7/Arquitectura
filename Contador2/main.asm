;====================================================================
; Main.asm file generated by New Project wizard
;
; Created:   mié oct 16 2019
; Processor: ATmega328P
; Compiler:  AVRASM (Proteus)
;====================================================================

;====================================================================
; DEFINITIONS
;====================================================================

;====================================================================
; VARIABLES
;====================================================================

;====================================================================
; RESET and INTERRUPT VECTORS
;====================================================================
	
	ldi r19, 0b00000000 ;Contador
	ldi r20, 0b11111111 ;Salida a los LEDS
	ldi r21, 0b00000000 ;Flag 1 (Para el control del ON-OFF).
	ldi r22, 0b00000000 ;Flag 2 (Para controlar el incremento del contador).
	
	out ddrb, r19	;Configuración de los puertos
	out ddrd, r20
	
	rjmp Start

;====================================================================
; CODE SEGMENT
;====================================================================

Start:
	
	cpi r21, 1	;Checamos que este puesta la bandera 1 (que el registro 21 sea 1).
	brne read_Data	;En caso de que se encuentre en 0, leemos el pinb.
	nop		;No hacemos nada si el registro 21 está en 1.
	
	cpi r22, 1	;Checamos que este puesta la bandera 2.
	brne save_flag2	;En caso que se encuentre en 0, incrementamos nuestro contador y actualizamos el registro 22.
	nop		;No hacemos nada si el registro 22 está en 1 (que el registro 22 sea 1).
	
	;call delay_1000ms
	
	call turn_on	;Mantenemos predidos los LEDS.
	
	call read_Data	;Mantenemos la lectura del pin b
	
	rjmp Start
	
read_Data:

	sbis pinb, 0	;Leemos el pin b (entrada).
	call save_flag1	;En caso de que tengamos 0 (tierra) guardamos la bandera 1.
	call free_flag1	;En caso contrario, liberamos la bandera 1 (la ponemos en 0).
	
save_flag1:
	
	cpi r21, 0	;Checamos si el registro 21 es igual a 0.
	brne Start	;En caso negativo, nos vamos al Start.
	inc r21		;En caso afirmativo, aumentamos en 1 el registro 21 y nos vamos a Start. 
	rjmp Start
	
save_flag2:
	
	inc r19		;Incrementamos el valor del contador en 1.
	inc r22		;Incrementamos el valor del registro en 1.
	rjmp Start	;Nos vamos a Start.

free_flag1:
	
	cpi r21, 1	;Checamos si el registro 21 en igual a 1.
	brne Start	;En caso negativo, nos vamos a Start.
	dec r21		;En caso afirmativo, le restamos 1 y nos vamos a Start. 
	
	call free_flag2	;Limpiamos el registro 22 (bandera que nos sirve para controlar el incremento del contador).

free_flag2:

	cpi r22, 1	;Checamos si el registro 22 es igual a 1.
	brne Start	;En caso negativo, nos vamos a Start.
	dec r22		;En caso afirmativo le restamos 1.
	rjmp Start	;Nos vamos a Start.
	
turn_on:

	out portd, r19	;Sacamos el registro 19 para que se muestre en los LEDS
	ret
	
delay_1000ms:		;Función para retrasar

	ldi r16, 6	;Debe ser 99

	repetir2:
	
		ldi r17, 99

	repetir1:
	
		ldi r18, 199

	repetir:
	
		nop
		nop
		nop
		nop
		nop
		dec r18
		brne repetir	;2 ciclos
		dec r17
		brne repetir1
		dec r16
		brne repetir2
		
ret